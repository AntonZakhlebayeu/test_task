services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APPLICATION_PORT}:${APPLICATION_PORT}"
    volumes:
      - .:/app:cached
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:${APPLICATION_PORT}/api/v1/healthcheck/healthz/ || exit 1",
        ]
      interval: 3s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:15
    restart: always
    env_file:
      - .env
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U $DB_USER -d $DB_NAME"]
      interval: 2s
      timeout: 20s
      retries: 7

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --user ${REDIS_USERNAME} on >${REDIS_PASSWORD} ~* +@all
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  pytest:
    container_name: pytest
    build:
      context: .
      dockerfile: Dockerfile.pytest
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app:cached

volumes:
  pgdata:
  redis_data:
