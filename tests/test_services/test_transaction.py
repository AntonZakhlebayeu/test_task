from decimal import Decimal

import pytest

from apps.account.models import Transaction, Wallet
from apps.account.services.transaction import TransactionService
from apps.common.exceptions import ValidationError


@pytest.mark.django_db
def test_transaction_service_create_with_given_txid():
    wallet = Wallet.objects.create(label="Test Wallet")
    txid = "custom-txid-123"
    amount = Decimal("10.00")

    tx = TransactionService.create(wallet=wallet, amount=amount, txid=txid)

    assert tx.id is not None
    assert tx.wallet == wallet
    assert tx.txid == txid
    assert tx.amount == amount


@pytest.mark.django_db
def test_transaction_service_create_without_txid_generates_unique_txid():
    wallet = Wallet.objects.create(label="Test Wallet")
    amount = Decimal("5.00")

    tx1 = TransactionService.create(wallet=wallet, amount=amount)
    tx2 = TransactionService.create(wallet=wallet, amount=amount)

    assert tx1.txid != tx2.txid  # txid autogenerated and unique


@pytest.mark.django_db
def test_transaction_service_create_negative_balance_raises():
    wallet = Wallet.objects.create(label="Test Wallet")

    Transaction.objects.create(wallet=wallet, txid="tx1", amount=Decimal("10.00"))

    with pytest.raises(ValidationError):
        TransactionService.create(wallet=wallet, amount=Decimal("-20.00"))
